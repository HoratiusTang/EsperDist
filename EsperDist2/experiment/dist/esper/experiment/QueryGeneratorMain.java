package dist.esper.experiment;

import java.util.*;

import dist.esper.experiment.QueryGenerator.IntPair;
import dist.esper.experiment.util.MultiLineFileWriter;
import dist.esper.external.event.EventInstanceGenerator;

public class QueryGeneratorMain {
	public static void main(String[] args){
		String templatesFilePath="query/templates.txt";
		String queriesFilePath="query/queries.txt";
		QueryGenerator qg=new QueryGenerator();
		try {
			qg.readTemplatesFromFile(templatesFilePath);
			System.out.format("read %d templates from %s\n", qg.templateStrs.size(), templatesFilePath);
			initQueryGeneratorEvents(qg);
			
			IntPair[] pairs={
				new IntPair(1,20), /* 1-stream filter query, 20 in total*/ 
				new IntPair(2,10), /* 2-stream join query, 10 in total*/
				new IntPair(3,5), /* 3-stream join query, 5 in total*/
				new IntPair(4,2), /* 4-stream join query, 2 in total*/
				new IntPair(5,1), /* 5-stream join query, 1 in total*/
			};
			
			List<String> queryList=qg.generateQuries(Arrays.asList(pairs));
			List<String> queriesWithHeaders=insertCommentHeaders(queryList);
			
			MultiLineFileWriter.writeToFile(queriesFilePath, queriesWithHeaders);
			System.out.format("generate %d queries, and write to %s\n", 
					queryList.size(), queriesFilePath);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static List<String> insertCommentHeaders(List<String> queryList){
		List<String> lines=new ArrayList<String>(queryList.size()+2);
		String header="";
		header+=String.format("# this file is generated by experiment/%s", QueryGeneratorMain.class.getName());
		header+="\n";
		header+=String.format("# the prototype of event is generated by experiment/%s", EventGeneratorFactory.class.getName());
		lines.add(header);
		lines.addAll(queryList);
		return lines;
	}
	
	public static void initQueryGeneratorEvents(QueryGenerator qg){
		List<EventInstanceGenerator> eventGenList=genEventInstanceGenerators();
		for(EventInstanceGenerator eg: eventGenList){
			qg.addEventPrototype(eg.getCategoryName(), eg.getFieldGeneratorMap());
			qg.addEventName(eg.getCategoryName(), eg.getEventName());
		}
	}
	
	public static List<EventInstanceGenerator> genEventInstanceGenerators(){		
		EventInstanceGenerator[] eventGens={
				EventGeneratorFactory.genEventInstanceGenerator("A", "AJ"),
				//EventGeneratorFactory.genEventInstanceGenerator("A", "AK"),
				EventGeneratorFactory.genEventInstanceGenerator("B", "BJ"),
				//EventGeneratorFactory.genEventInstanceGenerator("B", "BK"),
				EventGeneratorFactory.genEventInstanceGenerator("C", "CJ"),
				//EventGeneratorFactory.genEventInstanceGenerator("C", "CK"),
				EventGeneratorFactory.genEventInstanceGenerator("D", "DJ"),
				//EventGeneratorFactory.genEventInstanceGenerator("D", "DK"),
				EventGeneratorFactory.genEventInstanceGenerator("E", "EJ"),
				//EventGeneratorFactory.genEventInstanceGenerator("E", "EK"),
		};
		return Arrays.asList(eventGens);
	}
}
